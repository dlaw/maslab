#include "qik.h"
#include "adc.h"
#include <avr/pgmspace.h>

const int DIST_BETWEEN_WHEELS = 10;
const int ACCURACY_THRESHOLD = 10;
const int ROT_K = -50;
const int ROT_MOVE_K = -10;
const int VEL_K = 5;

volatile int state; // algorithm's internal state

volatile int dl;
volatile int dr;

volatile uint32_t dist_to_target;
volatile int32_t theta_to_target;

volatile int ticks_l;
volatile int ticks_r;

unsigned char baud0 = 103; //250k baud rate
unsigned char baud2 = 25; //38.4k baud rate
volatile unsigned char analog[15];
volatile char adchan=0;
volatile uint32_t com_buf[5];
volatile uint32_t data_buf[5];
volatile uint32_t raw_rx=0;
volatile char frame=0;
volatile char com_index=0;
volatile char data_index=0;
int16_t go;

int16_t cosFixPt[1024] PROGMEM = { 65535, 65533, 65530, 65523, 65515, 65504, 65490, 65474, 65456, 65435, 65411, 65385, 65357, 65326, 65293, 65257, 65219, 65178, 65135, 65090, 65042, 64991, 64938, 64883, 64825, 64765, 64702, 64637, 64570, 64500, 64427, 64353, 64275, 64196, 64114, 64029, 63942, 63853, 63761, 63667, 63570, 63472, 63370, 63267, 63161, 63052, 62941, 62828, 62713, 62595, 62474, 62352, 62227, 62100, 61970, 61838, 61704, 61567, 61428, 61287, 61143, 60997, 60849, 60699, 60546, 60391, 60234, 60074, 59912, 59748, 59582, 59413, 59242, 59069, 58894, 58717, 58537, 58355, 58171, 57985, 57796, 57606, 57413, 57218, 57021, 56821, 56620, 56416, 56211, 56003, 55793, 55581, 55367, 55151, 54933, 54712, 54490, 54265, 54039, 53810, 53580, 53347, 53113, 52876, 52638, 52397, 52155, 51910, 51664, 51415, 51165, 50913, 50659, 50403, 50145, 49885, 49623, 49360, 49094, 48827, 48558, 48287, 48014, 47739, 47463, 47185, 46905, 46623, 46340, 46055, 45768, 45479, 45189, 44896, 44603, 44307, 44010, 43711, 43411, 43109, 42805, 42500, 42193, 41885, 41574, 41263, 40950, 40635, 40319, 40001, 39682, 39361, 39039, 38715, 38390, 38063, 37735, 37406, 37075, 36742, 36409, 36074, 35737, 35400, 35061, 34720, 34378, 34035, 33691, 33346, 32999, 32651, 32302, 31951, 31599, 31247, 30892, 30537, 30181, 29823, 29465, 29105, 28744, 28382, 28019, 27655, 27290, 26924, 26557, 26189, 25820, 25450, 25079, 24707, 24334, 23960, 23585, 23210, 22833, 22456, 22078, 21699, 21319, 20938, 20557, 20174, 19791, 19408, 19023, 18638, 18252, 17866, 17479, 17091, 16702, 16313, 15923, 15533, 15142, 14750, 14358, 13966, 13573, 13179, 12785, 12390, 11995, 11599, 11203, 10807, 10410, 10013, 9615, 9218, 8819, 8421, 8022, 7622, 7223, 6823, 6423, 6023, 5622, 5221, 4821, 4419, 4018, 3617, 3215, 2813, 2412, 2010, 1608, 1206, 804, 402, 0, -402, -804, -1206, -1608, -2010, -2412, -2813, -3215, -3617, -4018, -4419, -4821, -5221, -5622, -6023, -6423, -6823, -7223, -7622, -8022, -8421, -8819, -9218, -9615, -10013, -10410, -10807, -11203, -11599, -11995, -12390, -12785, -13179, -13573, -13966, -14358, -14750, -15142, -15533, -15923, -16313, -16702, -17091, -17479, -17866, -18252, -18638, -19023, -19408, -19791, -20174, -20557, -20938, -21319, -21699, -22078, -22456, -22833, -23210, -23585, -23960, -24334, -24707, -25079, -25450, -25820, -26189, -26557, -26924, -27290, -27655, -28019, -28382, -28744, -29105, -29465, -29823, -30181, -30537, -30892, -31247, -31599, -31951, -32302, -32651, -32999, -33346, -33691, -34035, -34378, -34720, -35061, -35400, -35737, -36074, -36409, -36742, -37075, -37406, -37735, -38063, -38390, -38715, -39039, -39361, -39682, -40001, -40319, -40635, -40950, -41263, -41574, -41885, -42193, -42500, -42805, -43109, -43411, -43711, -44010, -44307, -44603, -44896, -45189, -45479, -45768, -46055, -46340, -46623, -46905, -47185, -47463, -47739, -48014, -48287, -48558, -48827, -49094, -49360, -49623, -49885, -50145, -50403, -50659, -50913, -51165, -51415, -51664, -51910, -52155, -52397, -52638, -52876, -53113, -53347, -53580, -53810, -54039, -54265, -54490, -54712, -54933, -55151, -55367, -55581, -55793, -56003, -56211, -56416, -56620, -56821, -57021, -57218, -57413, -57606, -57796, -57985, -58171, -58355, -58537, -58717, -58894, -59069, -59242, -59413, -59582, -59748, -59912, -60074, -60234, -60391, -60546, -60699, -60849, -60997, -61143, -61287, -61428, -61567, -61704, -61838, -61970, -62100, -62227, -62352, -62474, -62595, -62713, -62828, -62941, -63052, -63161, -63267, -63370, -63472, -63570, -63667, -63761, -63853, -63942, -64029, -64114, -64196, -64275, -64353, -64427, -64500, -64570, -64637, -64702, -64765, -64825, -64883, -64938, -64991, -65042, -65090, -65135, -65178, -65219, -65257, -65293, -65326, -65357, -65385, -65411, -65435, -65456, -65474, -65490, -65504, -65515, -65523, -65530, -65533, -65535, -65533, -65530, -65523, -65515, -65504, -65490, -65474, -65456, -65435, -65411, -65385, -65357, -65326, -65293, -65257, -65219, -65178, -65135, -65090, -65042, -64991, -64938, -64883, -64825, -64765, -64702, -64637, -64570, -64500, -64427, -64353, -64275, -64196, -64114, -64029, -63942, -63853, -63761, -63667, -63570, -63472, -63370, -63267, -63161, -63052, -62941, -62828, -62713, -62595, -62474, -62352, -62227, -62100, -61970, -61838, -61704, -61567, -61428, -61287, -61143, -60997, -60849, -60699, -60546, -60391, -60234, -60074, -59912, -59748, -59582, -59413, -59242, -59069, -58894, -58717, -58537, -58355, -58171, -57985, -57796, -57606, -57413, -57218, -57021, -56821, -56620, -56416, -56211, -56003, -55793, -55581, -55367, -55151, -54933, -54712, -54490, -54265, -54039, -53810, -53580, -53347, -53113, -52876, -52638, -52397, -52155, -51910, -51664, -51415, -51165, -50913, -50659, -50403, -50145, -49885, -49623, -49360, -49094, -48827, -48558, -48287, -48014, -47739, -47463, -47185, -46905, -46623, -46340, -46055, -45768, -45479, -45189, -44896, -44603, -44307, -44010, -43711, -43411, -43109, -42805, -42500, -42193, -41885, -41574, -41263, -40950, -40635, -40319, -40001, -39682, -39361, -39039, -38715, -38390, -38063, -37735, -37406, -37075, -36742, -36409, -36074, -35737, -35400, -35061, -34720, -34378, -34035, -33691, -33346, -32999, -32651, -32302, -31951, -31599, -31247, -30892, -30537, -30181, -29823, -29465, -29105, -28744, -28382, -28019, -27655, -27290, -26924, -26557, -26189, -25820, -25450, -25079, -24707, -24334, -23960, -23585, -23210, -22833, -22456, -22078, -21699, -21319, -20938, -20557, -20174, -19791, -19408, -19023, -18638, -18252, -17866, -17479, -17091, -16702, -16313, -15923, -15533, -15142, -14750, -14358, -13966, -13573, -13179, -12785, -12390, -11995, -11599, -11203, -10807, -10410, -10013, -9615, -9218, -8819, -8421, -8022, -7622, -7223, -6823, -6423, -6023, -5622, -5221, -4821, -4419, -4018, -3617, -3215, -2813, -2412, -2010, -1608, -1206, -804, -402, 0, 402, 804, 1206, 1608, 2010, 2412, 2813, 3215, 3617, 4018, 4419, 4821, 5221, 5622, 6023, 6423, 6823, 7223, 7622, 8022, 8421, 8819, 9218, 9615, 10013, 10410, 10807, 11203, 11599, 11995, 12390, 12785, 13179, 13573, 13966, 14358, 14750, 15142, 15533, 15923, 16313, 16702, 17091, 17479, 17866, 18252, 18638, 19023, 19408, 19791, 20174, 20557, 20938, 21319, 21699, 22078, 22456, 22833, 23210, 23585, 23960, 24334, 24707, 25079, 25450, 25820, 26189, 26557, 26924, 27290, 27655, 28019, 28382, 28744, 29105, 29465, 29823, 30181, 30537, 30892, 31247, 31599, 31951, 32302, 32651, 32999, 33346, 33691, 34035, 34378, 34720, 35061, 35400, 35737, 36074, 36409, 36742, 37075, 37406, 37735, 38063, 38390, 38715, 39039, 39361, 39682, 40001, 40319, 40635, 40950, 41263, 41574, 41885, 42193, 42500, 42805, 43109, 43411, 43711, 44010, 44307, 44603, 44896, 45189, 45479, 45768, 46055, 46340, 46623, 46905, 47185, 47463, 47739, 48014, 48287, 48558, 48827, 49094, 49360, 49623, 49885, 50145, 50403, 50659, 50913, 51165, 51415, 51664, 51910, 52155, 52397, 52638, 52876, 53113, 53347, 53580, 53810, 54039, 54265, 54490, 54712, 54933, 55151, 55367, 55581, 55793, 56003, 56211, 56416, 56620, 56821, 57021, 57218, 57413, 57606, 57796, 57985, 58171, 58355, 58537, 58717, 58894, 59069, 59242, 59413, 59582, 59748, 59912, 60074, 60234, 60391, 60546, 60699, 60849, 60997, 61143, 61287, 61428, 61567, 61704, 61838, 61970, 62100, 62227, 62352, 62474, 62595, 62713, 62828, 62941, 63052, 63161, 63267, 63370, 63472, 63570, 63667, 63761, 63853, 63942, 64029, 64114, 64196, 64275, 64353, 64427, 64500, 64570, 64637, 64702, 64765, 64825, 64883, 64938, 64991, 65042, 65090, 65135, 65178, 65219, 65257, 65293, 65326, 65357, 65385, 65411, 65435, 65456, 65474, 65490, 65504, 65515, 65523, 65530, 65533};


ISR(ADC_vect){
  analog[adchan]=ADCH;
}

ISR(USART0_RX_vect){
  raw_rx |= (((uint32_t) UDR0)<<frame);
  frame+=8;
  if(frame==32){
    if((raw_rx>>31)==0x1){
      com_buf[com_index]=raw_rx;
      com_index++;
    }
    else{
      data_buf[data_index]=raw_rx;
      data_index++;
    }
    frame=0;
    raw_rx=0;
  }
}

void setup(){
  adc_init(2,6);  //channel 2, div 64 clock prescaler
  adchan=2;
  pinMode(2, INPUT);
  pinMode(30, INPUT);
  digitalWrite(30, HIGH); 
  int serial;
  usart0_init(baud0);
  usart2_init(baud2);
  usart2_tx(0xaa);
  sei();
  adc_start();
}

void loop(){ 
  if(com_index>0){
    usart0_tx(com_buf[com_index-1]&0xff);
    com_index--;
  }
  if(data_index>0){
    usart0_tx(data_buf[data_index-1]&0xff);
    data_index--;
  }
  /*if(analog[2]>30){
   drive(1,50);
   drive(0,50);
   delay(100);
   }else{
   drive(1,-50);
   drive(0,50);
   delay(100);
   }*/
}

void timer0_init(int period) {
  TCCR0A |= (1<<WGM01); // set timer 0 to CTC mode
  TCCR0B |= (1<<CS01)|(1<<CS00); // set /64 clock prescaler
  OCR0A = 127; // trigger the timer interrupt every 500 us
  TIMSK0 |= (1<<OCIE0A);
}

ISR(TIMER0_COMPA_vect) {
  int rot_speed;
  int vel;
  
  update_state();
  
  switch (state) {
    case 0: // waiting for command
      dl = 0;
      dr = 0;
      break;
      
    case 1: // rotating to face destination
      rot_speed = theta_to_target * ROT_K;
      dl = 0 + rot_speed;
      dr = 0 - rot_speed;
      
      break;
      
    case 2: // moving forward
      vel = VEL_K * dist_to_target;
      rot_speed = theta_to_target * ROT_MOVE_K;
      
      dl = vel + rot_speed;
      dr = vel - rot_speed;
   
      if (dl > 127) dl = 127;
      if (dr > 127) dr = 127;
      if (dl < -127) dl = -127;
      if (dr < -127) dr = -127;
      
      if (dist_to_target < ACCURACY_THRESHOLD) {
        state = 0;
        dl = 0;
        dr = 0;
        // tell the eeepc that we've reached the destination point
      }
        
      break;
  }
}

void go_to_point(int32_t target_x, int32_t target_y) {
  dist_to_target = sqrt(target_x*target_x + target_y*target_y);
  if (target_x != 0) {
    theta_to_target = ((int32_t) (atan(target_y/target_x) * 65536));
  } else {
    theta_to_target = 102943;
  }
}

void correction(uint32_t r, int32_t theta) {
  theta_to_target = theta;
  dist_to_target = r;
}

void update_state() {
  int dist_moved = (ticks_l + ticks_r) >> 1;
  
  dist_to_target = dist_to_target - (pgm_read_word(&(cosFixPt[theta_to_target >> 6])) * dist_moved) >> 16;
  
  
  int32_t theta_rotd = ((ticks_l - ticks_r)<<16) / DIST_BETWEEN_WHEELS;
  theta_to_target = theta_to_target + theta_rotd;
  
  // reset tick counters
  ticks_l = 0;
  ticks_r = 0;
}
